/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface EntryPointInterface extends Interface {
    getFunction(nameOrSignature: "handleUserOperation"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "UserOperationExecuted"): EventFragment;

    encodeFunctionData(functionFragment: 'handleUserOperation', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'handleUserOperation', data: BytesLike): Result;
  }

  
    export namespace UserOperationExecutedEvent {
      export type InputTuple = [wallet: AddressLike, target: AddressLike, value: BigNumberish, data: BytesLike];
      export type OutputTuple = [wallet: string, target: string, value: bigint, data: string];
      export interface OutputObject {wallet: string, target: string, value: bigint, data: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface EntryPoint extends BaseContract {
    
    connect(runner?: ContractRunner | null): EntryPoint;
    waitForDeployment(): Promise<this>;

    interface: EntryPointInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    handleUserOperation: TypedContractMethod<
      [wallet: AddressLike, target: AddressLike, value: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'handleUserOperation'): TypedContractMethod<
      [wallet: AddressLike, target: AddressLike, value: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'UserOperationExecuted'): TypedContractEvent<UserOperationExecutedEvent.InputTuple, UserOperationExecutedEvent.OutputTuple, UserOperationExecutedEvent.OutputObject>;

    filters: {
      
      'UserOperationExecuted(address,address,uint256,bytes)': TypedContractEvent<UserOperationExecutedEvent.InputTuple, UserOperationExecutedEvent.OutputTuple, UserOperationExecutedEvent.OutputObject>;
      UserOperationExecuted: TypedContractEvent<UserOperationExecutedEvent.InputTuple, UserOperationExecutedEvent.OutputTuple, UserOperationExecutedEvent.OutputObject>;
    
    };
  }