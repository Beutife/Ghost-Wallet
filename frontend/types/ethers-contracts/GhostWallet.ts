/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface GhostWalletInterface extends Interface {
    getFunction(nameOrSignature: "destroy" | "destroyed" | "entryPoint" | "execute" | "owner" | "sweep"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Destroyed" | "Executed" | "Swept"): EventFragment;

    encodeFunctionData(functionFragment: 'destroy', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'destroyed', values?: undefined): string;
encodeFunctionData(functionFragment: 'entryPoint', values?: undefined): string;
encodeFunctionData(functionFragment: 'execute', values: [AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'sweep', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'destroy', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'destroyed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'entryPoint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result;
  }

  
    export namespace DestroyedEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ExecutedEvent {
      export type InputTuple = [target: AddressLike, value: BigNumberish, data: BytesLike];
      export type OutputTuple = [target: string, value: bigint, data: string];
      export interface OutputObject {target: string, value: bigint, data: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SweptEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface GhostWallet extends BaseContract {
    
    connect(runner?: ContractRunner | null): GhostWallet;
    waitForDeployment(): Promise<this>;

    interface: GhostWalletInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    destroy: TypedContractMethod<
      [_to: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    destroyed: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    entryPoint: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    execute: TypedContractMethod<
      [target: AddressLike, value: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    sweep: TypedContractMethod<
      [_to: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'destroy'): TypedContractMethod<
      [_to: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'destroyed'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'entryPoint'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'execute'): TypedContractMethod<
      [target: AddressLike, value: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'sweep'): TypedContractMethod<
      [_to: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Destroyed'): TypedContractEvent<DestroyedEvent.InputTuple, DestroyedEvent.OutputTuple, DestroyedEvent.OutputObject>;
getEvent(key: 'Executed'): TypedContractEvent<ExecutedEvent.InputTuple, ExecutedEvent.OutputTuple, ExecutedEvent.OutputObject>;
getEvent(key: 'Swept'): TypedContractEvent<SweptEvent.InputTuple, SweptEvent.OutputTuple, SweptEvent.OutputObject>;

    filters: {
      
      'Destroyed(address,uint256)': TypedContractEvent<DestroyedEvent.InputTuple, DestroyedEvent.OutputTuple, DestroyedEvent.OutputObject>;
      Destroyed: TypedContractEvent<DestroyedEvent.InputTuple, DestroyedEvent.OutputTuple, DestroyedEvent.OutputObject>;
    

      'Executed(address,uint256,bytes)': TypedContractEvent<ExecutedEvent.InputTuple, ExecutedEvent.OutputTuple, ExecutedEvent.OutputObject>;
      Executed: TypedContractEvent<ExecutedEvent.InputTuple, ExecutedEvent.OutputTuple, ExecutedEvent.OutputObject>;
    

      'Swept(address,uint256)': TypedContractEvent<SweptEvent.InputTuple, SweptEvent.OutputTuple, SweptEvent.OutputObject>;
      Swept: TypedContractEvent<SweptEvent.InputTuple, SweptEvent.OutputTuple, SweptEvent.OutputObject>;
    
    };
  }